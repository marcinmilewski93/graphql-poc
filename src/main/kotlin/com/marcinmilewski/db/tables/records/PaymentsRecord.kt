/*
 * This file is generated by jOOQ.
 */
package com.marcinmilewski.db.tables.records


import com.marcinmilewski.db.tables.Payments

import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PaymentsRecord() : UpdatableRecordImpl<PaymentsRecord>(Payments.PAYMENTS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var customerId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var price: BigDecimal?
        set(value): Unit = set(2, value)
        get(): BigDecimal? = get(2) as BigDecimal?

    open var finalPrice: BigDecimal?
        set(value): Unit = set(3, value)
        get(): BigDecimal? = get(3) as BigDecimal?

    open var points: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    open var paymentMethod: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var datetime: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    open var additionalItem: JSONB?
        set(value): Unit = set(7, value)
        get(): JSONB? = get(7) as JSONB?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(9, value)
        get(): LocalDateTime? = get(9) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised PaymentsRecord
     */
    constructor(id: Int? = null, customerId: String? = null, price: BigDecimal? = null, finalPrice: BigDecimal? = null, points: BigDecimal? = null, paymentMethod: String? = null, datetime: LocalDateTime? = null, additionalItem: JSONB? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.customerId = customerId
        this.price = price
        this.finalPrice = finalPrice
        this.points = points
        this.paymentMethod = paymentMethod
        this.datetime = datetime
        this.additionalItem = additionalItem
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
